"Setup kustomize toolchain repositories and rules"

load(":repo_utils.bzl", "repo_utils")

KUSTOMIZE_PLATFORMS = {
    "darwin_amd64": struct(
        release_platform = "macos-amd64",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "darwin_arm64": struct(
        release_platform = "macos-arm64",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_amd64": struct(
        release_platform = "linux-amd64",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_arm64": struct(
        release_platform = "linux-arm64",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    ),
    "windows_amd64": struct(
        release_platform = "win64",
        compatible_with = [
            "@platforms//os:windows",
            "@platforms//cpu:x86_64",
        ],
    ),
}

DEFAULT_KUSTOMIZE_VERSION = "4.5.3"

# https://github.com/kubernetes-sigs/kustomize/releases
#
# The integrity hashes can be computed with
# shasum -b -a 384 [downloaded file] | awk '{ print $1 }' | xxd -r -p | base64
KUSTOMIZE_VERSIONS = {
    "4.5.3": {
        "linux-amd64": "e4dc2f795235b03a2e6b12c3863c44abe81338c5c0054b29baf27dcc734ae693",
        "linux-arm64": "97cf7d53214388b1ff2177a56404445f02d8afacb9421339c878c5ac2c8bc2c8",
        "darwin-amd64": "b0a6b0568273d466abd7cd535c556e44aa9ff5f54c07e86ed9f3016b416de992",
        "darwin-arm64": "2fb58138c319d404e1604ae6665356e211b2ea45f17f174df1322de0100a55c4",
        "windows_amd64": "ad5ac5ed8d244309e4a41cfd61e87918096e159514e4867c9449409b67a6709f",
    },
}

KustomizeInfo = provider(
    doc = "Provides info for executing kustomize",
    fields = {
        "bin": "Executable kustomize binary",
    },
)

def _kustomize_toolchain_impl(ctx):
    binary = ctx.attr.bin.files.to_list()[0]

    # Make the $(KUSTOMIZE_BIN) variable available in places like genrules.
    # See https://docs.bazel.build/versions/main/be/make-variables.html#custom_variables
    template_variables = platform_common.TemplateVariableInfo({
        "KUSTOMIZE_BIN": binary.path,
    })
    default_info = DefaultInfo(
        files = depset([binary]),
        runfiles = ctx.runfiles(files = [binary]),
    )
    kustomize_info = KustomizeInfo(
        bin = binary,
    )

    # Export all the providers inside our ToolchainInfo
    # so the resolved_toolchain rule can grab and re-export them.
    toolchain_info = platform_common.ToolchainInfo(
        kustomizeinfo = kustomize_info,
        template_variables = template_variables,
        default = default_info,
    )

    return [default_info, kustomize_info, toolchain_info, template_variables]

kustomize_toolchain = rule(
    implementation = _kustomize_toolchain_impl,
    attrs = {
        "bin": attr.label(
            mandatory = True,
            allow_single_file = True,
            executable = True,
            cfg = "exec",
        ),
    },
    provides = [
        # DefaultInfo,
        KustomizeInfo,
        platform_common.ToolchainInfo,
        platform_common.TemplateVariableInfo,
    ],
)

def _kustomize_toolchains_repo_impl(rctx):
    # Expose a concrete toolchain which is the result of Bazel resolving the toolchain
    # for the execution or target platform.
    # Workaround for https://github.com/bazelbuild/bazel/issues/14009
    starlark_content = """# @generated by @rules_gitops//gitops/private:kustomize_toolchain.bzl

# Forward all the providers
def _resolved_toolchain_impl(ctx):
    toolchain_info = ctx.toolchains["@rules_gitops//gitops:kustomize_toolchain_type"]
    return [
        toolchain_info,
        toolchain_info.default,
        toolchain_info.kustomizeinfo,
        toolchain_info.template_variables,
    ]

# Copied from java_toolchain_alias
# https://cs.opensource.google/bazel/bazel/+/master:tools/jdk/java_toolchain_alias.bzl
resolved_toolchain = rule(
    implementation = _resolved_toolchain_impl,
    toolchains = ["@rules_gitops//gitops:kustomize_toolchain_type"],
    incompatible_use_toolchain_transition = True,
)
"""
    rctx.file("defs.bzl", starlark_content)

    build_content = """# @generated by @rules_gitops//gitops/private:kustomize_toolchain.bzl
#
# These can be registered in the workspace file or passed to --extra_toolchains flag.
# By default all these toolchains are registered by the kustomize_register_toolchains macro
# so you don't normally need to interact with these targets.

load(":defs.bzl", "resolved_toolchain")

resolved_toolchain(name = "resolved_toolchain", visibility = ["//visibility:public"])

"""

    for [platform, meta] in KUSTOMIZE_PLATFORMS.items():
        build_content += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:kustomize_toolchain",
    toolchain_type = "@rules_gitops//gitops:kustomize_toolchain_type",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

kustomize_toolchains_repo = repository_rule(
    _kustomize_toolchains_repo_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)

def _kustomize_platform_repo_impl(rctx):
    is_windows = rctx.attr.platform.startswith("windows_")
    meta = KUSTOMIZE_PLATFORMS[rctx.attr.platform]
    release_platform = meta.release_platform if hasattr(meta, "release_platform") else rctx.attr.platform

    url = "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv{0}/kustomize_v{0}_{1}.tar.gz".format(
        rctx.attr.version,
        release_platform,
    )

    rctx.download_and_extract(
        url,
        sha256 = KUSTOMIZE_VERSIONS[rctx.attr.version][release_platform],
    )
    build_content = """# @generated by @rules_gitops//gitops/private:kustomize_toolchain.bzl
load("@rules_gitops//gitops/private:kustomize_toolchain.bzl", "kustomize_toolchain")
exports_files(["{0}"])
kustomize_toolchain(name = "kustomize_toolchain", bin = "{0}", visibility = ["//visibility:public"])
""".format("kustomize.exe" if is_windows else "kustomize")

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

kustomize_platform_repo = repository_rule(
    implementation = _kustomize_platform_repo_impl,
    doc = "Fetch external tools needed for kustomize toolchain",
    attrs = {
        "version": attr.string(mandatory = True, values = KUSTOMIZE_VERSIONS.keys()),
        "platform": attr.string(mandatory = True, values = KUSTOMIZE_PLATFORMS.keys()),
    },
)

def _kustomize_host_alias_repo(rctx):
    ext = ".exe" if repo_utils.is_windows(rctx) else ""

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", """# @generated by @rules_gitops//gitops/private:kustomize_toolchain.bzl
package(default_visibility = ["//visibility:public"])
exports_files(["kustomize{ext}"])
""".format(
        ext = ext,
    ))

    rctx.symlink("../{name}_{platform}/kustomize{ext}".format(
        name = rctx.attr.name,
        platform = repo_utils.platform(rctx),
        ext = ext,
    ), "kustomize{ext}".format(ext = ext))

kustomize_host_alias_repo = repository_rule(
    _kustomize_host_alias_repo,
    doc = """Creates a repository with a shorter name meant for the host platform, which contains
    a BUILD.bazel file that exports symlinks to the host platform's binaries
    """,
)

def _current_kustomize_toolchain_impl(ctx):
    toolchain_info = ctx.toolchains[str(Label("@rules_gitops//gitops:kustomize_toolchain_type"))]

    return [
        toolchain_info,
        toolchain_info.default,
        toolchain_info.kustomizeinfo,
        toolchain_info.template_variables,
    ]

# This rule exists so that the current kustomize toolchain can be used in the `toolchains` attribute of
# other rules, such as genrule. It allows exposing a kustomize_toolchain after toolchain resolution has
# happened, to a rule which expects a concrete implementation of a toolchain, rather than a
# toochain_type which could be resolved to that toolchain.
#
# See https://github.com/bazelbuild/bazel/issues/14009#issuecomment-921960766
current_kustomize_toolchain = rule(
    implementation = _current_kustomize_toolchain_impl,
    toolchains = [
        str(Label("@rules_gitops//gitops:kustomize_toolchain_type")),
    ],
)
